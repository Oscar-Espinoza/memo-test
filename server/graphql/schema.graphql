scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

enum State {
  Started
  Completed
}

type GameSession {
  id: ID!
  memoTest: MemoTest!
  score: Int!
  completed: Boolean!
  retries: Int!
  numberOfPairs: Int!
  state: State!
}


type MemoTest {
  id: ID!
  name: String
  gameSessions: [GameSession!]!
  images: [String!]!
  highestScore: Int @field(resolver: "App\\GraphQL\\Queries\\MemoTestResolver@highestScore")
}

type Query {
  memoTest(id: ID! @eq): MemoTest @find
  memoTests: [MemoTest!]! @all
  gameSession(id: ID! @eq): GameSession @find
}

type Mutation {
  createGameSession(memo_test_id: ID!, score: Int!, retries: Int!, numberOfPairs: Int!, state: State): GameSession! @create

  updateGameSession(id: ID!, score: Int, completed: Boolean, retries: Int, numberOfPairs: Int, state: State): GameSession! @update

  addImageMemoTest(id: ID!, newImages: [String]): MemoTest! @field(resolver: "App\\GraphQL\\Mutations\\AddImageMemoTest")

  deleteImageMemoTest(id: ID!, imageIndex: Int!): MemoTest! @field(resolver: "App\\GraphQL\\Mutations\\DeleteImageMemoTest")

  createMemoTest(name: String! @rules(apply: ["required", "unique:memo_tests,name"]), images: [String]): MemoTest! @create

  deleteMemoTest(id: ID! @whereKey): MemoTest! @delete
}
